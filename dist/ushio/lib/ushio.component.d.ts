import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { ISubtitle, UshioService } from './ushio.service';
export declare class UshioSource {
    src: string;
    type: string;
    shortname: string;
    name: string;
    default: boolean;
}
export declare class UshioSubtitles {
    value: string;
    src: string;
    type: string;
    name: string;
    class: string;
    srclang: string;
    default: boolean;
}
interface Source {
    shortName: string;
    name: string;
    sources: {
        src: string;
        type: string;
    }[];
    default?: boolean;
}
interface Subtitles {
    name: string;
    class: string;
    parsedSubtitles: ISubtitle[];
    enabled: boolean;
}
export declare class UshioComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy {
    private element;
    private sanitization;
    private service;
    private mInjectedStyles;
    readonly injectedStyles: import("@angular/platform-browser").SafeHtml[];
    src: any;
    poster: any;
    crossorigin: any;
    autoplay: any;
    preload: string;
    lang: string;
    thumbnails: any;
    private mSrc;
    private mSources;
    sources: Source[];
    playingSource: number;
    private mSubtitles;
    subtitles: Subtitles[];
    readonly enabledSubtitles: Subtitles[];
    flyingSubtitles: Subtitles[];
    private mVolume;
    volume: any;
    readonly volume100: number;
    volumeChange: EventEmitter<number>;
    private mPlaybackRate;
    playbackRate: any;
    playbackRateChange: EventEmitter<number>;
    private mVolumeControl;
    volumeControl: any;
    private mSourceControl;
    sourceControl: any;
    private mSubtitlesControl;
    subtitlesControl: any;
    private mSettingsControl;
    settingsControl: any;
    private mLoopControl;
    loopControl: any;
    private mFullscreenControl;
    fullscreenControl: any;
    video: any;
    slider: any;
    volumeBar: any;
    volumePanel: any;
    volumeBtn: any;
    settingsPanel: any;
    settingsBtn: any;
    speedBar: any;
    sourcePanel: any;
    sourceBtn: any;
    subtitlesPanel: any;
    subtitlesBtn: any;
    loopBtn: any;
    loopPanel: any;
    fullScreenBtn: any;
    fullScreenPanel: any;
    contextMenu: any;
    langContextMenuOption: any;
    sourceContentChildren: QueryList<UshioSource>;
    subtitlesContentChildren: QueryList<UshioSubtitles>;
    private subtitlesSlotUpdate$;
    private sourcesSlotUpdate$;
    private subtitlesSlotChange$;
    private sourcesSlotChange$;
    private mobileShowControlStateChange$;
    interactMode: 'desktop' | 'mobile';
    private focus;
    private mShowControl;
    private thumbMouseDown;
    private controlMouseDown;
    controlHoveredClass: string;
    private showContextMenu;
    private showStatisticInfoPanel;
    private showVolumeHint;
    private showProgressDetail;
    readonly isFullScreen: boolean;
    readonly mouseDown: boolean;
    readonly showControl: boolean;
    showControlChange: EventEmitter<boolean>;
    readonly thumbMouseDownClass: string;
    readonly pausedClass: string;
    readonly waitingClass: string;
    readonly mutedClass: string;
    readonly loopClass: string;
    readonly subtitleEnabledClass: string;
    readonly fullscreenClass: string;
    readonly contextMenuClass: string;
    readonly statisticInfoPanelClass: string;
    readonly volumeHintClass: string;
    readonly progressDetailClass: string;
    private mPaused;
    paused: any;
    pausedChange: EventEmitter<boolean>;
    private mCurrentTime;
    currentTime: any;
    currentTimeChange: EventEmitter<number>;
    private duration;
    durationChange: EventEmitter<number>;
    private bufferedTime;
    private waiting;
    waitingChange: EventEmitter<boolean>;
    loop: any;
    loopChange: EventEmitter<boolean>;
    muted: any;
    mutedChange: EventEmitter<boolean>;
    fps: string;
    private fpsStart;
    private fpsIndex;
    readonly currentTimeStr: string;
    readonly durationStr: string;
    readonly bufferedProgress: SafeStyle;
    readonly playedProgress: SafeStyle;
    readonly thumbPosition: SafeStyle;
    readonly volumeRate: SafeStyle;
    readonly volumeThumbPosition: SafeStyle;
    readonly speedThumbPosition: SafeStyle;
    private panelTranslations;
    readonly settingsPanelPosition: SafeStyle;
    readonly sourcePanelPosition: SafeStyle;
    readonly subtitlesPanelPosition: SafeStyle;
    readonly loopPanelPosition: SafeStyle;
    readonly fullScreenPanelPosition: SafeStyle;
    private mContextMenuPosition;
    readonly contextMenuPosition: SafeStyle;
    private mProgressDetailPosition;
    private mProgressDetailContainerPosition;
    private mProgressDetailTimePosition;
    private mProgressDetailPositionRate;
    readonly progressDetailPosition: SafeStyle;
    readonly progressDetailContainerPosition: SafeStyle;
    readonly progressDetailTimePosition: SafeStyle;
    readonly progressDetailImgStyle: SafeStyle;
    readonly progressDetailTime: string;
    languages: string[][];
    contextMenuState: string;
    readonly version: string;
    readonly detailedVersion: string;
    readonly videoResolution: string;
    readonly videoDuration: any;
    readonly videoCurrentTime: any;
    private timeUpdate;
    private controlHoveredChange;
    private subscriptions;
    t: (key: string) => string;
    static mapSpeedToProgress(speed: any): number;
    static mapProgressToSpeed(progress: any): number;
    static formatDuration(duration: number): string;
    constructor(element: ElementRef, sanitization: DomSanitizer, service: UshioService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private updateSources;
    private updateSubtitles;
    private updateFlyingSubtitles;
    private setAllControlPanelsPosition;
    private setPanelPosition;
    onSlotChange(e: any): void;
    onVideoMaskClicked(): void;
    onSelectSource(i: any): void;
    onCheckSubtitles(i: any): void;
    togglePlay(): void;
    toggleMute(): void;
    toggleLoop(): void;
    toggleFullscreen(): void;
    showLangMenu(): void;
    onComponentClicked(): void;
    onDocumentClicked(): void;
    setLanguage(code: any): void;
    toggleShowStatisticInfoPanel(): void;
}
export {};
